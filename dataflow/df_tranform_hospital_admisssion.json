{
	"name": "df_tranform_hospital_admisssion",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_Hospital_Admission_raw",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissionSource"
				},
				{
					"dataset": {
						"referenceName": "ds_Country_Lookup",
						"type": "DatasetReference"
					},
					"name": "CountrySource"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "df_processed_admissionsdaily",
						"type": "DatasetReference"
					},
					"name": "dailysink"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_weekly",
						"type": "DatasetReference"
					},
					"name": "weeklysink"
				}
			],
			"transformations": [
				{
					"name": "HospitalSelect"
				},
				{
					"name": "CountryLookup"
				},
				{
					"name": "selectrequired2"
				},
				{
					"name": "SplitDailyfromWeekly"
				},
				{
					"name": "derivedEDCDCYEARweek"
				},
				{
					"name": "AggDimdate"
				},
				{
					"name": "joinwithdate"
				},
				{
					"name": "pivotweekly"
				},
				{
					"name": "pivotdaily"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "sortdaily"
				},
				{
					"name": "selectweekly"
				},
				{
					"name": "selectdaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissionSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountrySource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DimDate",
				"HospitalAdmissionSource select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> HospitalSelect",
				"HospitalSelect, CountrySource lookup(HospitalSelect@country == CountrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CountryLookup",
				"CountryLookup select(mapColumn(",
				"          country = HospitalSelect@country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country = CountrySource@country,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequired2",
				"selectrequired2 split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> SplitDailyfromWeekly@(Weekly, Daily)",
				"DimDate derive(ecdc_year_week = year + '-W' +lpad(week_of_year,2,'0')) ~> derivedEDCDCYEARweek",
				"derivedEDCDCYEARweek aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> AggDimdate",
				"SplitDailyfromWeekly@Weekly, AggDimdate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinwithdate",
				"joinwithdate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          week_start_date,",
				"          week_end_date,",
				"          reported_year_week,",
				"          population,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotweekly",
				"SplitDailyfromWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_date,",
				"          population,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivotdaily",
				"pivotweekly sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> SortWeekly",
				"pivotdaily sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortdaily",
				"SortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          reported_year_week,",
				"          population,",
				"          source,",
				"          {new hospital admissions per 100k_count} = {Weekly new hospital admissions per 100k_count},",
				"          {new ICU admissions per 100k_count} = {Weekly new ICU admissions per 100k_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectweekly",
				"sortdaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_date,",
				"          population,",
				"          source,",
				"          {hospital occupancy_count} = {Daily hospital occupancy_count},",
				"          {ICU occupancy_count} = {Daily ICU occupancy_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectdaily",
				"selectdaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> dailysink",
				"selectweekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> weeklysink"
			]
		}
	}
}